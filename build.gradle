import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
	id 'org.springframework.boot' version '3.1.5'
	id 'io.spring.dependency-management' version '1.1.3'
	id 'org.asciidoctor.jvm.convert' version '3.3.2'
	id 'org.jetbrains.kotlin.jvm' version '1.8.22'
	id 'org.jetbrains.kotlin.plugin.spring' version '1.8.22'
	id 'org.jetbrains.kotlin.plugin.jpa' version '1.8.22'
	id 'jacoco'
	id "io.freefair.lombok" version "5.3.0"
}

group = 'br.ufrn.imd'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('snippetsDir', file("build/generated-snippets"))
	set('springCloudVersion', "2022.0.4")
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-data-rest'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
	implementation 'org.flywaydb:flyway-core'
	implementation 'org.jetbrains.kotlin:kotlin-reflect'
	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
	runtimeOnly 'com.h2database:h2'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'

	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'org.postgresql:postgresql'


	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.boot:spring-boot-testcontainers'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'org.testcontainers:postgresql'

	implementation("com.github.ben-manes.caffeine:caffeine:2.9.1")
	implementation("org.springframework.boot:spring-boot-starter-cache")

	//Seguran√ßa
	implementation 'org.springframework.boot:spring-boot-starter-security'
	testImplementation 'org.springframework.boot:spring-boot-starter-security'
	testImplementation 'org.springframework.security:spring-security-test'

	//JWT
	implementation 'com.auth0:java-jwt:4.4.0'

	//Actuator
	implementation 'org.springframework.boot:spring-boot-starter-actuator:3.2.1'

	implementation 'org.springframework.boot:spring-boot-starter-mail'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

tasks.withType(KotlinCompile) {
	kotlinOptions {
		freeCompilerArgs += '-Xjsr305=strict'
		jvmTarget = '17'
	}
}

tasks.named('bootBuildImage') {
	builder = 'paketobuildpacks/builder-jammy-base:latest'
}

tasks.named('test') {
	maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
	outputs.dir snippetsDir
	useJUnitPlatform()
	finalizedBy(tasks.jacocoTestReport)
}

tasks.named('asciidoctor') {
	inputs.dir snippetsDir
	dependsOn test
}

tasks.named("jacocoTestReport") {
	executionData(file("${project.buildDir}/jacoco/test.exec"))

	reports {
		html.required.set(true)
		xml.required.set(true)
	}

	classDirectories.setFrom(
			files(
					classDirectories.files.collect {
						fileTree(it) {
							exclude("**/obama/ObamaApplication**")
							exclude("**/model/**")
							exclude("**/entity/**")
							exclude("**/handler/**")
							exclude("**/mapper/**")
							exclude("**/exception/**")
							exclude("**/configuration/")
							exclude("**/exchange/**")
							exclude("**/enums/**")
						}
					}
			)
	)
}
